const axios = require("axios");

module.exports.config = {
    name: "baby",
    version: "1.0.0",
    hasPermission: 0,
    credits: "Nawaz Boss",
    description: "Baby AI - ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü AI ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
    commandCategory: "AI",
    usages: "[‡§¨‡•â‡§ü ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§∞ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç]",
    cooldowns: 5,
};

let userMemory = {};
let isActive = true;
const API_KEY = "nawaz-hacker"; // ‚úÖ API Key Set

module.exports.handleEvent = async function ({ api, event }) {
    const { threadID, messageID, senderID, body, messageReply } = event;
    if (!isActive || !body) return;

    const lowerBody = body.toLowerCase();

    // ‚úÖ "Baby" ‡§ï‡§π‡§®‡•á ‡§™‡§∞ ‡§¨‡•â‡§ü ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§ó‡§æ
    if (lowerBody.includes("baby")) {
        return api.sendMessage("‡§π‡§æ‡§Å, ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å! üòä", threadID, messageID);
    }

    // ‚úÖ ‡§Ö‡§ó‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡•á ‡§¨‡•â‡§ü ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§∞ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§Æ‡§§ ‡§ï‡§∞‡•ã
    if (!messageReply || messageReply.senderID !== api.getCurrentUserID()) return;

    const userQuery = body.trim();

    // ‚úÖ API ‡§ï‡•â‡§≤ (API Key ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ó‡§à)
    const apiURL = `https://nawaz-hacker-api.onrender.com/api?message=${encodeURIComponent(userQuery)}&apikey=${API_KEY}`;

    try {
        const response = await axios.get(apiURL);
        let botReply = response.data.response || "‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ï‡•ç‡§ï‡§§ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?";

        return api.sendMessage({
            body: botReply,
            mentions: [{ tag: "Baby", id: api.getCurrentUserID() }]
        }, threadID, messageID);

    } catch (error) {
        console.error("API Error:", error.message);
        return api.sendMessage("‚ùå AI ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§", threadID, messageID);
    }
};

// ‚úÖ ‡§¨‡•â‡§ü ‡§ï‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° (on/off)
module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID } = event;
    const command = args[0] && args[0].toLowerCase();

    if (command === "on") {
        isActive = true;
        return api.sendMessage("‚úÖ Baby AI ‡§Ö‡§¨ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§", threadID, messageID);
    } else if (command === "off") {
        isActive = false;
        return api.sendMessage("‚ö†Ô∏è Baby AI ‡§Ö‡§¨ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§", threadID, messageID);
    }
};