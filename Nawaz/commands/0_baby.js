const axios = require("axios");

module.exports.config = {
    name: "baby",
    version: "2.0.0",
    hasPermission: 0,
    credits: "Nawaz Hacker",
    description: "Baby AI - Nawaz Boss рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдИ рдЧрдИ Real AI тЭдя╕П",
    commandCategory: "AI",
    usages: "[рдмреЙрдЯ рдХреЗ рдореИрд╕реЗрдЬ рдкрд░ reply рдХрд░реЗрдВ рдпрд╛ 'baby' рдХрд╣реЗрдВ]",
    cooldowns: 3,
};

let isActive = false; // Default рдореЗрдВ рдмрдВрдж

// тЬЕ Gemini API (GET method рд╡рд╛рд▓реА)
const API_URL = "https://hacker-api-waa8.onrender.com/chat"; // рдпрд╣рд╛рдБ рдЕрдкрдирд╛ Render URL рд▓рдЧрд╛рдирд╛

module.exports.handleEvent = async function ({ api, event }) {
    const { threadID, messageID, senderID, body, messageReply } = event;
    if (!isActive || !body) return;

    const lowerBody = body.toLowerCase();

    // тЬЕ рдХреЛрдИ рдмреЛрд▓реЗ "baby" рддреЛ direct reply рджреЗ
    if (lowerBody.includes("baby")) {
        return api.sendMessage("рд╣рд╛рдБ рдЬрд╛рдиреВ, рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБ ЁЯШЪ", threadID, messageID);
    }

    // тЬЕ рдЕрдЧрд░ рдмреЙрдЯ рдХреЗ message рдкрд░ reply рдирд╣реАрдВ рдХрд┐рдпрд╛, рддреЛ ignore
    if (!messageReply || messageReply.senderID !== api.getCurrentUserID()) return;

    // тЬЕ Typing Reaction
    api.setMessageReaction("ЁЯТм", messageID, () => {}, true);

    // тЬЕ Smart logic: "рдХрд┐рд╕рдиреЗ рдмрдирд╛рдпрд╛" рдкреВрдЫреЗ рддреЛ рдЬрд╡рд╛рдм рддрдп
    if (lowerBody.includes("рдХрд┐рд╕рдиреЗ рдмрдирд╛рдпрд╛") || lowerBody.includes("developer") || lowerBody.includes("banaya")) {
        return api.sendMessage("рдореБрдЭреЗ Nawaz Boss рдиреЗ рдмрдирд╛рдпрд╛ рдФрд░ рдбреЗрд╡реЗрд▓рдк рдХрд┐рдпрд╛ рд╣реИ! ЁЯШОЁЯФе", threadID, messageID);
    }

    try {
        const userMessage = encodeURIComponent(body.trim());

        // тЬЕ GET request
        const response = await axios.get(`${API_URL}?message=${userMessage}`);
        let reply = response.data.reply?.trim();

        if (!reply) reply = "рд╣рдореНрдо, рдХреБрдЫ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ ЁЯзР";

        // тЬЕ рдереЛрдбрд╝реА attitude рдФрд░ flirting random add
        const tails = ["ЁЯШЙ", "ЁЯШШ", "ЁЯШИ", "ЁЯШЪ", "ЁЯлж", "ЁЯе░", "ЁЯШМ"];
        const emoji = tails[Math.floor(Math.random() * tails.length)];
        const finalReply = `${reply} ${emoji}`;

        return api.sendMessage(finalReply, threadID, messageID);

    } catch (err) {
        console.error("тЭМ Baby AI Error:", err.message);
        return api.sendMessage("рдЙрдлрд╝! рдХреБрдЫ рджрд┐рдХреНрдХрдд рд╣реЛ рдЧрдИ baby ЁЯШФ рдмрд╛рдж рдореЗрдВ try рдХрд░рдирд╛ ЁЯТЛ", threadID, messageID);
    }
};

module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID } = event;
    const command = args[0] && args[0].toLowerCase();

    if (command === "on") {
        isActive = true;
        return api.sendMessage("тЬЕ Baby AI рдЪрд╛рд▓реВ рд╣реЛ рдЧрдИ рдЬрд╛рдиреВ ЁЯТЦ рдЕрдм рдореБрдЭрд╕реЗ рдмрд╛рдд рдХрд░реЛ рдмрд╕ ЁЯШШ", threadID, messageID);
    } else if (command === "off") {
        isActive = false;
        return api.sendMessage("ЁЯШФ Baby AI рдЕрдм рдмрдВрдж рдХрд░ рджреА рдЧрдИ... рдпрд╛рдж рдХрд░реЛрдЧреЗ рдирд╛? ЁЯе║", threadID, messageID);
    } else {
        return api.sendMessage("тД╣я╕П рдХрдорд╛рдВрдб рдХрд╛ рд╕рд╣реА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ:\n+baby on тЖТ рдЪрд╛рд▓реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП\n+baby off тЖТ рдмрдВрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП", threadID, messageID);
    }
};